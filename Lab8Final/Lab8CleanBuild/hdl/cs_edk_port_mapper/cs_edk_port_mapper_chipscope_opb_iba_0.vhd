-- Chipscope OPB IBA Wrapper HDL file generated by chipscope_opb_iba's TCL Generator


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
library Unisim;
use Unisim.all;

entity chipscope_opb_iba is
  generic (
    -- Bus interconnect generics
    C_OPB_AWIDTH       : integer  := 32;
    C_OPB_DWIDTH       : integer  := 32;
    C_NUM_MASTERS      : integer  := 2;
    C_NUM_SLAVES       : integer  := 10;
    C_FAMILY           : string   := "virtex2";
    C_DEVICE           : string   := "2vp30";
    C_PACKAGE          : string   := "ff896";
    C_SPEEDGRADE       : string   := "-7";

    C_NUM_DATA_SAMPLES : integer  := 512;

    C_ENABLE_TRIGGER_OUT : integer := 0;

    C_GENERIC_TRIGGER_UNITS : integer := 0;
    C_GENERIC_TRIGGER_IN_WIDTH : integer := 8;
    C_TRIGGER_UNIT_COUNTER_WIDTH : integer := 0;
    C_TRIGGER_UNIT_MATCH_TYPE : string := "basic";
    
    C_CONTROL_UNITS : integer := 0;
    C_CONTROL_UNIT_COUNTER_WIDTH : integer  := 0;
    C_CONTROL_UNIT_MATCH_TYPE : string := "basic";

    C_ADDR_UNITS : integer := 0;
    C_ADDR_UNIT_COUNTER_WIDTH : integer  := 0;
    C_ADDR_UNIT_MATCH_TYPE : string := "basic";

    C_DATA_UNITS : integer := 0;
    C_DATA_UNIT_COUNTER_WIDTH : integer  := 0;
    C_DATA_UNIT_MATCH_TYPE : string := "basic";

    C_WRDATA_UNITS : integer := 0;
    C_WRDATA_UNIT_COUNTER_WIDTH : integer  := 0;
    C_WRDATA_UNIT_MATCH_TYPE : string := "basic";


    C_RDDATA_UNITS : integer := 0;
    C_RDDATA_UNIT_COUNTER_WIDTH : integer  := 0;
    C_RDDATA_UNIT_MATCH_TYPE : string := "basic";


    C_PV_UNITS : integer := 0;
    C_PV_UNIT_COUNTER_WIDTH : integer  := 0;
    C_PV_UNIT_MATCH_TYPE : string := "basic";


    C_MASTER0_UNITS : integer := 0;
    C_MASTER0_UNIT_COUNTER_WIDTH : integer  := 0;
    C_MASTER0_UNIT_MATCH_TYPE : string := "basic";


    C_MASTER1_UNITS : integer := 0;
    C_MASTER1_UNIT_COUNTER_WIDTH : integer  := 0;
    C_MASTER1_UNIT_MATCH_TYPE : string := "basic";


    C_MASTER2_UNITS : integer := 0;
    C_MASTER2_UNIT_COUNTER_WIDTH : integer  := 0;
    C_MASTER2_UNIT_MATCH_TYPE : string := "basic";


    C_MASTER3_UNITS : integer := 0;
    C_MASTER3_UNIT_COUNTER_WIDTH : integer  := 0;
    C_MASTER3_UNIT_MATCH_TYPE : string := "basic";

    C_MASTER4_UNITS : integer := 0;
    C_MASTER4_UNIT_COUNTER_WIDTH : integer  := 0;
    C_MASTER4_UNIT_MATCH_TYPE : string := "basic";


    C_MASTER5_UNITS : integer := 0;
    C_MASTER5_UNIT_COUNTER_WIDTH : integer  := 0;
    C_MASTER5_UNIT_MATCH_TYPE : string := "basic";


    C_MASTER6_UNITS : integer := 0;
    C_MASTER6_UNIT_COUNTER_WIDTH : integer  := 0;
    C_MASTER6_UNIT_MATCH_TYPE : string := "basic";


    C_MASTER7_UNITS : integer := 0;
    C_MASTER7_UNIT_COUNTER_WIDTH : integer  := 0;
    C_MASTER7_UNIT_MATCH_TYPE : string := "basic";

    C_SLAVE0_UNITS : integer := 0;
    C_SLAVE0_UNIT_COUNTER_WIDTH : integer  := 0;
    C_SLAVE0_UNIT_MATCH_TYPE : string := "basic";


    C_SLAVE1_UNITS : integer := 0;
    C_SLAVE1_UNIT_COUNTER_WIDTH : integer  := 0;
    C_SLAVE1_UNIT_MATCH_TYPE : string := "basic";


    C_SLAVE2_UNITS : integer := 0;
    C_SLAVE2_UNIT_COUNTER_WIDTH : integer  := 0;
    C_SLAVE2_UNIT_MATCH_TYPE : string := "basic";


    C_SLAVE3_UNITS : integer := 0;
    C_SLAVE3_UNIT_COUNTER_WIDTH : integer  := 0;
    C_SLAVE3_UNIT_MATCH_TYPE : string := "basic";

    C_SLAVE4_UNITS : integer := 0;
    C_SLAVE4_UNIT_COUNTER_WIDTH : integer  := 0;
    C_SLAVE4_UNIT_MATCH_TYPE : string := "basic";


    C_SLAVE5_UNITS : integer := 0;
    C_SLAVE5_UNIT_COUNTER_WIDTH : integer  := 0;
    C_SLAVE5_UNIT_MATCH_TYPE : string := "basic";


    C_SLAVE6_UNITS : integer := 0;
    C_SLAVE6_UNIT_COUNTER_WIDTH : integer  := 0;
    C_SLAVE6_UNIT_MATCH_TYPE : string := "basic";

-- new parameter to disable RPM
    C_DISABLE_RPM : integer :=0;

    C_SLAVE7_UNITS : integer := 0;
    C_SLAVE7_UNIT_COUNTER_WIDTH : integer  := 0;
    C_SLAVE7_UNIT_MATCH_TYPE : string := "basic"

    );  
  port (
    -- Clock and reset
    SYS_Rst        : in  std_logic;
    Debug_SYS_Rst  : in  std_logic;
    WDT_Rst        : in  std_logic;
    OPB_Clk        : in  std_logic;
    OPB_Rst        : in std_logic;
  
    -- Master outputs
    M_ABus         : in  std_logic_vector(0 to C_OPB_AWIDTH*C_NUM_MASTERS-1)
                         := (others => '0');
    M_BE           : in  std_logic_vector(0 to 
                         (C_OPB_DWIDTH+7)/8*C_NUM_MASTERS-1) := (others => '0');
    M_beXfer       : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
    M_busLock      : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
    M_DBus         : in  std_logic_vector(0 to C_OPB_DWIDTH*C_NUM_MASTERS-1)
                         := (others => '0');
    M_DBusEn       : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '1');
    M_DBusEn32_63  : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '1');
    M_dwXfer       : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
    M_fwXfer       : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
    M_hwXfer       : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
    M_request      : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
    M_RNW          : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
    M_select       : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
    M_seqAddr      : in  std_logic_vector(0 to C_NUM_MASTERS-1)
                         := (others => '0');
  
    -- Slave outputs
    Sl_beAck       : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '0');
    Sl_DBus        : in  std_logic_vector(0 to C_OPB_DWIDTH*
                                               C_NUM_SLAVES-1)
                         := (others => '0');
    Sl_DBusEn      : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '1');
    Sl_DBusEn32_63 : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '1');
    Sl_errAck      : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '0');
    Sl_dwAck       : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '0');
    Sl_fwAck       : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '0');
    Sl_hwAck       : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '0');
    Sl_retry       : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '0');
    Sl_toutSup     : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                         := (others => '0');
    Sl_xferAck     : in  std_logic_vector(0 to C_NUM_SLAVES-1)
                           := (others => '0');
        
    -- OPB outputs
    OPB_MRequest   : in std_logic_vector(0 to C_NUM_MASTERS-1);
    OPB_ABus       : in std_logic_vector(0 to C_OPB_AWIDTH-1);
    OPB_BE         : in std_logic_vector(0 to (C_OPB_DWIDTH+7)/8-1);
    OPB_beXfer     : in std_logic;
    OPB_beAck      : in std_logic;
    OPB_busLock    : in std_logic;
    OPB_rdDBus     : in std_logic_vector(0 to C_OPB_DWIDTH-1); -- extra
    OPB_wrDBus     : in std_logic_vector(0 to C_OPB_DWIDTH-1); -- extra
    OPB_DBus       : in std_logic_vector(0 to C_OPB_DWIDTH-1);
    OPB_errAck     : in std_logic;
    OPB_dwAck      : in std_logic;
    OPB_dwXfer     : in std_logic;
    OPB_fwAck      : in std_logic;
    OPB_fwXfer     : in std_logic;
    OPB_hwAck      : in std_logic;
    OPB_hwXfer     : in std_logic;
    OPB_MGrant     : in std_logic_vector(0 to C_NUM_MASTERS-1);
    OPB_pendReq    : in std_logic_vector(0 to C_NUM_MASTERS-1);
    OPB_retry      : in std_logic;
    OPB_RNW        : in std_logic;
    OPB_select     : in std_logic;
    OPB_seqAddr    : in std_logic;
    OPB_timeout    : in std_logic;
    OPB_toutSup    : in std_logic;
    OPB_xferAck    : in std_logic;

    -- IBA opb signals
    chipscope_icon_control    : in  std_logic_vector(35 downto 0);
    iba_trig_in    : in  std_logic_vector(C_GENERIC_TRIGGER_IN_WIDTH-1 downto 0);
    iba_trig_out   : out std_logic
    );
end entity chipscope_opb_iba;

-----------------------------------------------------------------------------
-- Architecture section
-----------------------------------------------------------------------------

architecture imp of chipscope_opb_iba is
    
-----------------------------------------------------------------------------
-- Component declarations
-----------------------------------------------------------------------------
  -------------------------------------------------------------------
  --
  --  IBA/OPB core component declaration
  -------------------------------------------------------------------
  component cs_coregen_chipscope_opb_iba_0 is

    generic ( 
        C_NUM_MASTERS    : integer:=2; 
    	C_NUM_SLAVES	 : integer:=10; 
        C_GENERIC_TRIGGER_IN_WIDTH : integer := 8
    ) ;
    port (
      control       : in    std_logic_vector(35 downto 0);

      trig_out      : out   std_logic;

      sys_rst       : in    std_logic;
      debug_sys_rst : in    std_logic;
      wdt_rst       : in    std_logic;
      opb_clk       : in    std_logic;
      opb_rst       : in    std_logic;

      m_be          : in    std_logic_vector(0 to (4*C_NUM_MASTERS)-1);
      m_buslock     : in    std_logic_vector(0 to (1*C_NUM_MASTERS)-1);
      m_request     : in    std_logic_vector(0 to (1*C_NUM_MASTERS)-1);
      m_rnw         : in    std_logic_vector(0 to (1*C_NUM_MASTERS)-1);
      m_select      : in    std_logic_vector(0 to (1*C_NUM_MASTERS)-1);
      m_seqaddr     : in    std_logic_vector(0 to (1*C_NUM_MASTERS)-1);
      sl_errack     : in    std_logic_vector(0 to (1*C_NUM_SLAVES)-1);
      sl_retry      : in    std_logic_vector(0 to (1*C_NUM_SLAVES)-1);
      sl_toutsup    : in    std_logic_vector(0 to (1*C_NUM_SLAVES)-1);
      sl_xferack    : in    std_logic_vector(0 to (1*C_NUM_SLAVES)-1);
      opb_abus      : in    std_logic_vector(0 to 31);
      opb_be        : in    std_logic_vector(0 to 3);
      opb_buslock   : in    std_logic;
      opb_rddbus    : in    std_logic_vector(0 to 31);
      opb_wrdbus    : in    std_logic_vector(0 to 31);
      opb_dbus      : in    std_logic_vector(0 to 31);
      opb_errack    : in    std_logic;
      opb_mgrant    : in    std_logic_vector(0 to (1*C_NUM_MASTERS)-1);
      opb_pendreq   : in    std_logic_vector(0 to (1*C_NUM_MASTERS)-1);
      opb_retry     : in    std_logic;
      opb_rnw       : in    std_logic;
      opb_select    : in    std_logic;
      opb_seqaddr   : in    std_logic;
      opb_timeout   : in    std_logic;
      opb_toutsup   : in    std_logic;
      opb_xferack   : in    std_logic
    );
  end component cs_coregen_chipscope_opb_iba_0;


   

-----------------------------------------------------------------------------
-- Begin architecture
-----------------------------------------------------------------------------

begin  -- architecture imp

  -----------------------------------------------------------------------------
  -- IBA instantiation
  -----------------------------------------------------------------------------
  i_cs_coregen_chipscope_opb_iba_0 : cs_coregen_chipscope_opb_iba_0
    generic map (
      C_NUM_MASTERS              => C_NUM_MASTERS,
      C_NUM_SLAVES               => C_NUM_SLAVES,
      C_GENERIC_TRIGGER_IN_WIDTH => C_GENERIC_TRIGGER_IN_WIDTH)

    port map
    (
      control       => chipscope_icon_control,


      trig_out      => iba_trig_out,


      sys_rst       => sys_rst,
      debug_sys_rst => debug_sys_rst,
      wdt_rst       => wdt_rst,
      opb_clk       => opb_clk,
      opb_rst       => opb_rst,

      m_be          => m_be,
      m_buslock     => m_buslock,
      m_request     => m_request,
      m_rnw         => m_rnw,
      m_select      => m_select,
      m_seqaddr     => m_seqaddr,
      sl_errack     => sl_errack,
      sl_retry      => sl_retry,
      sl_toutsup    => sl_toutsup,
      sl_xferack    => sl_xferack,
      opb_abus      => opb_abus,
      opb_be        => opb_be,
      opb_buslock   => opb_buslock,
      opb_rddbus    => opb_rddbus,
      opb_wrdbus    => opb_wrdbus,
      opb_dbus      => opb_dbus,
      opb_errack    => opb_errack,
      opb_mgrant    => opb_mgrant,
      opb_pendreq   => opb_pendreq,
      opb_retry     => opb_retry,
      opb_rnw       => opb_rnw,
      opb_select    => opb_select,
      opb_seqaddr   => opb_seqaddr,
      opb_timeout   => opb_timeout,
      opb_toutsup   => opb_toutsup,
      opb_xferack   => opb_xferack
    );


end architecture imp;

